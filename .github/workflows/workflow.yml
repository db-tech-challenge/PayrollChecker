name: Run Tests for All Teams

on:
  repository_dispatch:
    types: [alpha, beta, gamma, delta, check-all]

  push:
    branches: [ main, master ]
    paths:
      - '../../data/manual-tests.json'

  workflow_dispatch:

permissions:
  contents: write

jobs:
  process-all-teams:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        team: [alpha, beta, gamma, delta]
      fail-fast: false

    env:
      JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF-8

    steps:
      - name: Checkout current repo
        uses: actions/checkout@v4

      - name: Set team environment
        run: |
          echo "TEAM=${{ matrix.team }}" >> $GITHUB_ENV
          echo "Processing team: ${{ matrix.team }}"

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Clone and test target project
        run: |
          TEAM="${{ env.TEAM }}"
          echo "Cloning PayrollCalculator for team: $TEAM"

          mkdir -p "test-$TEAM"
          
          git clone https://github.com/db-tech-challenge/PayrollCalculator.git "test-$TEAM"
          cd "test-$TEAM"

          if git checkout "$TEAM"; then
            echo "Successfully checked out branch: $TEAM"
          
            mkdir -p src/test/java/com/payroll
            cp ../tests/PayrollApplicationTest.java src/test/java/com/payroll/

            echo "Compiling..."
            mvn clean compile > compile.log 2>&1 || true
            COMPILE_STATUS=$?
            echo $COMPILE_STATUS > compile.status
            echo "Compilation status: $COMPILE_STATUS"

            if [ $COMPILE_STATUS -eq 0 ]; then
              echo "Running app..."
              mvn exec:java -Dexec.mainClass="com.payroll.PayrollApplication" > run.log 2>&1 || true
              RUN_STATUS=$?
              echo $RUN_STATUS > run.status
              echo "Execution status: $RUN_STATUS"

              if [ $RUN_STATUS -eq 0 ]; then
                echo "Running tests..."
                mvn test > test.log 2>&1 || true
                TEST_STATUS=$?
                echo $TEST_STATUS > test.status
                echo "Test status: $TEST_STATUS"
              else
                echo "Skipping tests due to execution failure"
                echo 1 > test.status
              fi
            else
              echo "Skipping execution and tests due to compilation failure"
              echo 1 > run.status
              echo 1 > test.status
            fi
          else
            echo "Branch $TEAM not found"
            echo 1 > compile.status
            echo 1 > run.status
            echo 1 > test.status
            echo "Branch checkout failed" > compile.log
            echo "Branch checkout failed" > run.log
            echo "Branch checkout failed" > test.log
          fi

      - name: Generate results JSON
        run: |
          echo "Generating results for ${{ env.TEAM }}"
          python3 scripts/generate-results.py "${{ env.TEAM }}"

      - name: Upload team results
        uses: actions/upload-artifact@v4
        with:
          name: results-${{ matrix.team }}
          path: results/${{ matrix.team }}.json

  commit-results:
    needs: process-all-teams
    runs-on: ubuntu-latest
    if: always() && (needs.process-all-teams.result == 'success' || needs.process-all-teams.result == 'failure')

    steps:
      - name: Checkout current repo
        uses: actions/checkout@v4

      - name: Download all team results
        uses: actions/download-artifact@v4
        with:
          pattern: results-*
          path: results-temp/
          merge-multiple: true

      - name: Copy results to docs
        run: |
          cp -r results-temp/*.json docs/ 2>/dev/null || true
          
          echo "JSON results copied to docs:"
          ls -la docs/*.json
          
          cat > docs/_headers << EOF
          /*.json
            Cache-Control: no-cache, no-store, must-revalidate
            Pragma: no-cache
            Expires: 0
          
          /*.html
            Cache-Control: no-cache, no-store, must-revalidate
            Pragma: no-cache
            Expires: 0
          EOF

      - name: Determine trigger and commit message
        id: commit-info
        run: |
          if [ "${{ github.event_name }}" == "repository_dispatch" ]; then
            TRIGGER_TEAM="${{ github.event.action }}"
            echo "message=Update all teams (triggered by $TRIGGER_TEAM)" >> $GITHUB_OUTPUT
            echo "Triggered by team: $TRIGGER_TEAM"
          elif [ "${{ github.event_name }}" == "push" ]; then
            echo "message=Update all teams (manual tests changed)" >> $GITHUB_OUTPUT
            echo "Triggered by manual-tests.json change"
          else
            echo "message=Update all teams (manual run)" >> $GITHUB_OUTPUT
            echo "Triggered manually"
          fi

      - name: Commit and push results
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          git add docs/
          
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "${{ steps.commit-info.outputs.message }}"
            git push
            echo "All team results committed and pushed"
          fi

      - name: Summary
        run: |
          echo "Completed processing for ALL teams: alpha, beta, gamma, delta" >> $GITHUB_STEP_SUMMARY
          if [ "${{ github.event_name }}" == "repository_dispatch" ]; then
            echo "Triggered by: ${{ github.event.action }} team" >> $GITHUB_STEP_SUMMARY
          fi
          echo "All results updated on GitHub Pages" >> $GITHUB_STEP_SUMMARY

  deploy-pages:
    needs: commit-results
    runs-on: ubuntu-latest
    if: always() && (needs.commit-results.result == 'success')

    permissions:
      contents: read
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Checkout current repo
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './docs'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4